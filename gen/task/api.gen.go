// Package tasks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tasks

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TaskStatus.
const (
	Done    TaskStatus = "done"
	Failed  TaskStatus = "failed"
	Pending TaskStatus = "pending"
	Running TaskStatus = "running"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Task defines model for Task.
type Task struct {
	CreatedAt *time.Time              `json:"createdAt,omitempty"`
	Error     *string                 `json:"error"`
	Id        *string                 `json:"id,omitempty"`
	Result    *map[string]interface{} `json:"result"`
	Status    *TaskStatus             `json:"status,omitempty"`
}

// TaskStatus defines model for Task.Status.
type TaskStatus string

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Payload *map[string]interface{} `json:"payload,omitempty"`
}

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Создать новую задачу
	// (POST /tasks)
	CreateTask(ctx echo.Context) error
	// Получить статус/результат задачи
	// (GET /tasks/{id})
	GetTask(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateTask converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTask(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTask(ctx)
	return err
}

// GetTask converts echo context to params.
func (w *ServerInterfaceWrapper) GetTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTask(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/tasks", wrapper.CreateTask)
	router.GET(baseURL+"/tasks/:id", wrapper.GetTask)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yTz2ojRxDGX2Wo5DjRyH9Oc3NCCL7lkFvQoa0pyW3PdHe6ewxCCGTpYEJMcswpmOwT",
	"yMbC8hprX6H6jZbqsWwhiYWF3b2IUk939Vff7+shdHVltELlHeRDcN1TrEQsf7ZWWy6M1QatlxiXK3RO",
	"9JFLPzAIOThvperDaJSCxT9qabGA/PfXjZ10tVGfnGHXwyiF34Q7327dtSg8Fkee//S0rYSHHArh8Qcv",
	"K4R088YUcCVS1WUpTkqE3Nsad+yUxQ7JrNjVpf9EhzfRzgtfR6Go6opHNKgK7pOCrZVqqkIrVtoTssRi",
	"bfg1lzY685JUPR31Sc8K4MgNVDdhm5KjX48hhQu0TmoFOey12q0269EGlTAScjhotVsHkIIR/jQKzLxw",
	"57Ey2sXp2GfhpVbHBeTwU3Q6UmigofM/6mIQKWjlUcVDwphSduOx7Mzx7auEbMMzYlBqsW7y63w7J36L",
	"CtvdkDBauabbfnv/s7R8b7EHOXyXvcU5e8lyFseMdxboulYa3xhJN2FMC3oO/4QJLRO6S2hJt2FMM7ql",
	"ZZjQ+zBlnw/b7S+mpXlUu8T8R3O6o3kY03P4ix4TeqAZfQhjWobL6KGrq0rYAe/9n5b0QPc0C5NwndAz",
	"LekuTMPfzSFevwpTfi6i7zinTRo63KVJRjaUxYi19nFHOn5B/xINI6yo0KPlNkOQrJRDBikoUTFSWcAm",
	"y3TNi83wd7Y4t78+53c0Z5bhT1rQYxIuwyQ6Nw2XCS2SMKY5PYQpPYXr5ksD/fAbQP93hYtmjHHOPzN6",
	"pHuac7XJ/YaW9BSm4YoWkfz6KNn2HGtxoMWuOHB3tBcrvLUtIYdMGJld7MGoM/oYAAD//6cVA0keBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
